{
	"name": "TransformMovies",
	"properties": {
		"type": "MappingDataFlow",
		"typeProperties": {
			"sources": [
				{
					"dataset": {
						"referenceName": "MoviesDb",
						"type": "DatasetReference"
					},
					"name": "MoviesDb"
				}
			],
			"sinks": [
				{
					"dataset": {
						"referenceName": "MovieSink",
						"type": "DatasetReference"
					},
					"name": "MovieSink"
				}
			],
			"transformations": [
				{
					"name": "FilterYears"
				},
				{
					"name": "DerivedPrimaryGenre"
				},
				{
					"name": "RankMoviesByRating"
				},
				{
					"name": "select2"
				},
				{
					"name": "AggregateRatings"
				},
				{
					"name": "UpsertIfTrue"
				}
			],
			"scriptLines": [
				"source(output(",
				"          movie as string,",
				"          title as string,",
				"          genres as string,",
				"          year as string,",
				"          Rating as string,",
				"          {Rotton Tomato} as string",
				"     ),",
				"     allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     ignoreNoFilesFound: false) ~> MoviesDb",
				"select2 filter(toInteger(year) > 1950) ~> FilterYears",
				"FilterYears derive(PrimaryGenre = iif(locate(\"|\", genres) > 1, left(genres, locate(\"|\", genres)-1), genres)) ~> DerivedPrimaryGenre",
				"DerivedPrimaryGenre window(over(PrimaryGenre,",
				"          year),",
				"     desc({Rotten Tomato}, true),",
				"     RatingsRank = rank()) ~> RankMoviesByRating",
				"MoviesDb select(mapColumn(",
				"          movie,",
				"          title,",
				"          genres,",
				"          year,",
				"          Rating,",
				"          {Rotten Tomato} = {Rotton Tomato}",
				"     ),",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true) ~> select2",
				"RankMoviesByRating aggregate(groupBy(PrimaryGenre,",
				"          year),",
				"     AverageRating = avg(toInteger({Rotten Tomato})),",
				"          HighestRated = first(title),",
				"          LowestRated = last(title),",
				"          NumberOfMovies = count()) ~> AggregateRatings",
				"AggregateRatings alterRow(updateIf(true())) ~> UpsertIfTrue",
				"UpsertIfTrue sink(allowSchemaDrift: true,",
				"     validateSchema: false,",
				"     partitionFileNames:['sinkdb.csv'],",
				"     umask: 0777,",
				"     preCommands: [],",
				"     postCommands: [],",
				"     skipDuplicateMapInputs: true,",
				"     skipDuplicateMapOutputs: true,",
				"     partitionBy('hash', 1)) ~> MovieSink"
			]
		}
	}
}